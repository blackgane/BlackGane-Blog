<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux 文件与目录管理</title>
      <link href="/2020/09/11/Linux%20%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/"/>
      <url>/2020/09/11/Linux%20%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="目录与路径"><a href="#目录与路径" class="headerlink" title="目录与路径"></a>目录与路径</h2><h3 id="相对路径与绝对路径"><a href="#相对路径与绝对路径" class="headerlink" title="相对路径与绝对路径"></a>相对路径与绝对路径</h3><ul><li>绝对路径：路径的写法“一定由根目录 / 写起”</li><li>相对路径：路径的写法“不是由 / 写起”</li></ul><h3 id="目录的相关操作"><a href="#目录的相关操作" class="headerlink" title="目录的相关操作"></a>目录的相关操作</h3><ul><li>. 代表此层目录</li><li>.. 代表上一层目录</li><li><ul><li>代表前一个工作目录</li></ul></li><li>~ 代表“目前使用者身份”所在的主文件夹</li><li>~account 代表 account 这个使用者的主文件夹（account是个帐号名称）</li></ul><p>处理目录的指令</p><ul><li>cd：变换目录  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]$ <span class="built_in">cd</span> [相对路径或绝对路径]</span><br><span class="line"><span class="comment"># 最重要的就是目录的绝对路径与相对路径，还有一些特殊目录的符号啰！</span></span><br><span class="line">[root@study ~]$ <span class="built_in">cd</span> ~dmtsai</span><br><span class="line"><span class="comment"># 代表去到 dmtsai 这个使用者的主文件夹，亦即 /home/dmtsai</span></span><br><span class="line">[root@study dmtsai]$ <span class="built_in">cd</span> ~</span><br><span class="line"><span class="comment"># 表示回到自己的主文件夹，亦即是 /root 这个目录</span></span><br><span class="line">[root@study ~]$ <span class="built_in">cd</span></span><br><span class="line"><span class="comment"># 没有加上任何路径，也还是代表回到自己主文件夹的意思喔！</span></span><br><span class="line">[root@study ~]$ <span class="built_in">cd</span> ..</span><br><span class="line"><span class="comment"># 表示去到目前的上层目录，亦即是 /root 的上层目录的意思；</span></span><br><span class="line">[root@study /]$ <span class="built_in">cd</span> -</span><br><span class="line"><span class="comment"># 表示回到刚刚的那个目录，也就是 /root 啰～</span></span><br><span class="line">[root@study ~]$ <span class="built_in">cd</span> /var/spool/mail</span><br><span class="line"><span class="comment"># 这个就是绝对路径的写法！直接指定要去的完整路径名称！</span></span><br><span class="line">[root@study mail]$ <span class="built_in">cd</span> ../postfix</span><br><span class="line"><span class="comment"># 这个是相对路径的写法，我们由/var/spool/mail 去到/var/spool/postfix 就这样写！</span></span><br></pre></td></tr></table></figure></li><li>pwd：显示目前的目录  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]<span class="comment"># pwd [-P]</span></span><br><span class="line">选项与参数：</span><br><span class="line">-P ：显示出确实的路径，而非使用链接 （link） 路径。</span><br><span class="line">范例：单纯显示出目前的工作目录：</span><br><span class="line">[root@study ~]<span class="comment"># pwd</span></span><br><span class="line">/root &amp;lt;== 显示出目录啦～</span><br><span class="line">范例：显示出实际的工作目录，而非链接文件本身的目录名而已</span><br><span class="line">[root@study ~]<span class="comment"># cd /var/mail &amp;lt;==注意，/var/mail是一个链接文件</span></span><br><span class="line">[root@study mail]<span class="comment"># pwd</span></span><br><span class="line">/var/mail &amp;lt;==列出目前的工作目录</span><br><span class="line">[root@study mail]<span class="comment"># pwd -P</span></span><br><span class="line">/var/spool/mail &amp;lt;==怎么回事？有没有加 -P 差很多～</span><br><span class="line">[root@study mail]<span class="comment"># ls -ld /var/mail</span></span><br><span class="line">lrwxrwxrwx. 1 root root 10 May 4 17:51 /var/mail -&amp;gt; spool/mail</span><br><span class="line"><span class="comment"># 看到这里应该知道为啥了吧？因为 /var/mail 是链接文件，链接到 /var/spool/mail</span></span><br><span class="line"><span class="comment"># 所以，加上 pwd -P 的选项后，会不以链接文件的数据显示，而是显示正确的完整路径啊！</span></span><br></pre></td></tr></table></figure></li><li>mkdir：创建一个新的目录  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]<span class="comment"># mkdir [-mp] 目录名称</span></span><br><span class="line">选项与参数：</span><br><span class="line">-m ：设置文件的权限喔！直接设置，不需要看默认权限 （<span class="built_in">umask</span>） 的脸色～</span><br><span class="line">-p ：帮助你直接将所需要的目录（包含上层目录）递回创建起来！</span><br><span class="line">范例：请到/tmp下面尝试创建数个新目录看看：</span><br><span class="line">[root@study ~]<span class="comment"># cd /tmp</span></span><br><span class="line">[root@study tmp]<span class="comment"># mkdir test &amp;lt;==创建一名为 test 的新目录</span></span><br><span class="line">[root@study tmp]<span class="comment"># mkdir test1/test2/test3/test4</span></span><br><span class="line">mkdir: cannot create directory ‘test1/test2/test3/test4’: No such   file or directory</span><br><span class="line"><span class="comment"># 话说，系统告诉我们，没可能创建这个目录啊！就是没有目录才要创建的！见鬼嘛？</span></span><br><span class="line">[root@study tmp]<span class="comment"># mkdir -p test1/test2/test3/test4</span></span><br><span class="line"><span class="comment"># 原来是要建 test4 上层没先建 test3 之故！加了这个 -p 的选项，可以自行  帮你创建多层目录！</span></span><br><span class="line">范例：创建权限为rwx--x--x的目录</span><br><span class="line">[root@study tmp]<span class="comment"># mkdir -m 711 test2</span></span><br><span class="line">[root@study tmp]<span class="comment"># ls -ld test*</span></span><br><span class="line">drwxr-xr-x. 2 root root 6 Jun 4 19:03 <span class="built_in">test</span></span><br><span class="line">drwxr-xr-x. 3 root root 18 Jun 4 19:04 test1</span><br><span class="line">drwx--x--x. 2 root root 6 Jun 4 19:05 test2</span><br><span class="line"><span class="comment"># 仔细看上面的权限部分，如果没有加上 -m 来强制设置属性，系统会使用默认属性。</span></span><br><span class="line"><span class="comment"># 那么你的默认属性为何？这要通过下面介绍的 [umask](../Text/index.   html#umask) 才能了解喔！ ^_^</span></span><br></pre></td></tr></table></figure></li><li>rmdir：删除一个空的目录  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]<span class="comment"># rmdir [-p] 目录名称</span></span><br><span class="line">选项与参数：</span><br><span class="line">-p ：连同“上层”“空的”目录也一起删除</span><br><span class="line">范例：将于mkdir范例中创建的目录（/tmp下面）删除掉！</span><br><span class="line">[root@study tmp]<span class="comment"># ls -ld test* &amp;lt;==看看有多少目录存在？</span></span><br><span class="line">drwxr-xr-x. 2 root root 6 Jun 4 19:03 <span class="built_in">test</span></span><br><span class="line">drwxr-xr-x. 3 root root 18 Jun 4 19:04 test1</span><br><span class="line">drwx--x--x. 2 root root 6 Jun 4 19:05 test2</span><br><span class="line">[root@study tmp]<span class="comment"># rmdir test &amp;lt;==可直接删除掉，没问题</span></span><br><span class="line">[root@study tmp]<span class="comment"># rmdir test1 &amp;lt;==因为尚有内容，所以无法删除！</span></span><br><span class="line">rmdir: failed to remove ‘test1’: Directory not empty</span><br><span class="line">[root@study tmp]<span class="comment"># rmdir -p test1/test2/test3/test4</span></span><br><span class="line">[root@study tmp]<span class="comment"># ls -ld test* &amp;lt;==您看看，下面的输出中test与 test1不见了！</span></span><br><span class="line">drwx--x--x. 2 root root 6 Jun 4 19:05 test2</span><br><span class="line"><span class="comment"># 瞧！利用 -p 这个选项，立刻就可以将 test1/test2/test3/test4 一次删除   ～</span></span><br><span class="line"><span class="comment"># 不过要注意的是，这个 rmdir 仅能“删除空的目录”喔！</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="可执行文件路径的变量：-PATH"><a href="#可执行文件路径的变量：-PATH" class="headerlink" title="可执行文件路径的变量： $PATH"></a>可执行文件路径的变量： $PATH</h3><ul><li>不同身份使用者默认的PATH不同，默认能够随意执行的指令也不同（如root与blackgane）；</li><li>PATH是可以修改的；</li><li>使用绝对路径或相对路径直接指定某个指令的文件名来执行，会比搜寻PATH来的正确；</li><li>指令应该要放置到正确的目录下，执行才会比较方便；</li><li>本目录（.）最好不要放到PATH当中。</li></ul><h2 id="文件与目录管理"><a href="#文件与目录管理" class="headerlink" title="文件与目录管理"></a>文件与目录管理</h2><h3 id="文件与目录的检视：-ls"><a href="#文件与目录的检视：-ls" class="headerlink" title="文件与目录的检视： ls"></a>文件与目录的检视： ls</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]$ ls [-aAdfFhilnrRSt] 文件名或目录名称..</span><br><span class="line">[root@study ~]$ ls [--color=&#123;never,auto,always&#125;] 文件名或目录名称..</span><br><span class="line">[root@study ~]$ ls [--full-time] 文件名或目录名称..</span><br><span class="line">选项与参数：</span><br><span class="line">-a ：全部的文件，连同隐藏文件（ 开头为 . 的文件） 一起列出来（常用）</span><br><span class="line">-A ：全部的文件，连同隐藏文件，但不包括 . 与 .. 这两个目录</span><br><span class="line">-d ：仅列出目录本身，而不是列出目录内的文件数据（常用）</span><br><span class="line">-f ：直接列出结果，而不进行排序 （ls 默认会以文件名排序！）</span><br><span class="line">-F ：根据文件、目录等信息，给予附加数据结构，例如：</span><br><span class="line">*:代表可可执行文件； /:代表目录； =:代表 socket 文件； &amp;<span class="comment">#124;:代表 FIFO 文件；</span></span><br><span class="line">-h ：将文件大小以人类较易读的方式（例如 GB, KB 等等）列出来；</span><br><span class="line">-i ：列出 inode 号码，inode 的意义下一章将会介绍；</span><br><span class="line">-l ：长数据串行出，包含文件的属性与权限等等数据；（常用）</span><br><span class="line">-n ：列出 UID 与 GID 而非使用者与群组的名称 （UID与GID会在帐号管理提到！）</span><br><span class="line">-r ：将排序结果反向输出，例如：原本文件名由小到大，反向则为由大到小；</span><br><span class="line">-R ：连同子目录内容一起列出来，等于该目录下的所有文件都会显示出来；</span><br><span class="line">-S ：以文件大小大小排序，而不是用文件名排序；</span><br><span class="line">-t ：依时间排序，而不是用文件名。</span><br><span class="line">--color=never ：不要依据文件特性给予颜色显示；</span><br><span class="line">--color=always ：显示颜色</span><br><span class="line">--color=auto ：让系统自行依据设置来判断是否给予颜色</span><br><span class="line">--full-time ：以完整时间模式 （包含年、月、日、时、分） 输出</span><br><span class="line">--time=&#123;atime,ctime&#125; ：输出 access 时间或改变权限属性时间 （ctime）而非内容变更时间 （modification time）</span><br></pre></td></tr></table></figure><h3 id="复制、删除与移动：-cp-rm-mv"><a href="#复制、删除与移动：-cp-rm-mv" class="headerlink" title="复制、删除与移动： cp, rm, mv"></a>复制、删除与移动： cp, rm, mv</h3><h4 id="cp-（复制文件或目录）"><a href="#cp-（复制文件或目录）" class="headerlink" title="cp （复制文件或目录）"></a>cp （复制文件或目录）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]$ cp [-adfilprsu] 来源文件（<span class="built_in">source</span>） 目标文件（destination）</span><br><span class="line">[root@study ~]$ cp [options] source1 source2 source3 .... directory</span><br><span class="line">选项与参数：</span><br><span class="line">-a ：相当于 -dr --preserve=all 的意思，至于 dr 请参考下列说明；（常用）</span><br><span class="line">-d ：若来源文件为链接文件的属性（link file），则复制链接文件属性而非文件本身；</span><br><span class="line">-f ：为强制（force）的意思，若目标文件已经存在且无法打开，则移除后再尝试一次；</span><br><span class="line">-i ：若目标文件（destination）已经存在时，在覆盖时会先询问动作的进行（常用）</span><br><span class="line">-l ：进行硬式链接（hard link）的链接文件创建，而非复制文件本身；</span><br><span class="line">-p ：连同文件的属性（权限、用户、时间）一起复制过去，而非使用默认属性（备份常用）；</span><br><span class="line">-r ：递回持续复制，用于目录的复制行为；（常用）</span><br><span class="line">-s ：复制成为符号链接文件 （symbolic link），亦即“捷径”文件；</span><br><span class="line">-u ：destination 比 <span class="built_in">source</span> 旧才更新 destination，或 destination 不存在的情况下才复制。</span><br><span class="line">--preserve=all ：除了 -p 的权限相关参数外，还加入 SELinux 的属性, links, xattr 等也复制了。</span><br><span class="line">最后需要注意的，如果来源文件有两个以上，则最后一个目的文件一定要是“目录”才行！</span><br></pre></td></tr></table></figure><p>在复制时，你必须要清楚的了解到：</p><ul><li>是否需要完整的保留来源文件的信息？ </li><li>来源文件是否为链接文件 （symbolic link file）？</li><li>来源文件是否为特殊的文件，例如 FIFO, socket 等？</li><li>来源文件是否为目录？</li></ul><h4 id="rm-（移除文件或目录）"><a href="#rm-（移除文件或目录）" class="headerlink" title="rm （移除文件或目录）"></a>rm （移除文件或目录）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]$ rm [-fir] 文件或目录</span><br><span class="line">选项与参数：</span><br><span class="line">-f ：就是 force 的意思，忽略不存在的文件，不会出现警告讯息；</span><br><span class="line">-i ：互动模式，在删除前会询问使用者是否动作</span><br><span class="line">-r ：递回删除啊！最常用在目录的删除了！这是非常危险的选项！！！</span><br></pre></td></tr></table></figure><h4 id="mv-（移动文件与目录，或更名）"><a href="#mv-（移动文件与目录，或更名）" class="headerlink" title="mv （移动文件与目录，或更名）"></a>mv （移动文件与目录，或更名）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]$ mv [-fiu] <span class="built_in">source</span> destination</span><br><span class="line">[root@study ~]$ mv [options] source1 source2 source3 .... directory</span><br><span class="line">选项与参数：</span><br><span class="line">-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</span><br><span class="line">-i ：若目标文件 （destination） 已经存在时，就会询问是否覆盖！</span><br><span class="line">-u ：若目标文件已经存在，且 <span class="built_in">source</span> 比较新，才会更新 （update）</span><br></pre></td></tr></table></figure><h3 id="取得路径的文件名称与目录名称"><a href="#取得路径的文件名称与目录名称" class="headerlink" title="取得路径的文件名称与目录名称"></a>取得路径的文件名称与目录名称</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]$ basename /etc/sysconfig/network</span><br><span class="line">network  很简单！就取得最后的文件名～</span><br><span class="line">[root@study ~]$ dirname /etc/sysconfig/network</span><br><span class="line">/etc/sysconfig  取得的变成目录名了！</span><br></pre></td></tr></table></figure><h2 id="文件内容查阅"><a href="#文件内容查阅" class="headerlink" title="文件内容查阅"></a>文件内容查阅</h2><ul><li>cat 由第一行开始显示文件内容</li><li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li><li>nl 显示的时候，顺道输出行号！</li><li>more 一页一页的显示文件内容</li><li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</li><li>head 只看头几行</li><li>tail 只看尾巴几行</li><li>od 以二进制的方式读取文件内容！</li></ul><h3 id="直接检视文件内容"><a href="#直接检视文件内容" class="headerlink" title="直接检视文件内容"></a>直接检视文件内容</h3><h4 id="cat-（concatenate）"><a href="#cat-（concatenate）" class="headerlink" title="cat （concatenate）"></a>cat （concatenate）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]$ cat [-AbEnTv]</span><br><span class="line">选项与参数：</span><br><span class="line">-A ：相当于 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</span><br><span class="line">-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</span><br><span class="line">-E ：将结尾的断行字符 $ 显示出来；</span><br><span class="line">-n ：打印出行号，连同空白行也会有行号，与 -b 的选项不同；</span><br><span class="line">-T ：将 [tab] 按键以 ^I 显示出来；</span><br><span class="line">-v ：列出一些看不出来的特殊字符</span><br></pre></td></tr></table></figure><h4 id="tac-（反向列示）"><a href="#tac-（反向列示）" class="headerlink" title="tac （反向列示）"></a>tac （反向列示）</h4><p>cat的相反用法</p><h4 id="nl-（添加行号打印）"><a href="#nl-（添加行号打印）" class="headerlink" title="nl （添加行号打印）"></a>nl （添加行号打印）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]$ nl [-bnw] 文件</span><br><span class="line">选项与参数：</span><br><span class="line">-b ：指定行号指定的方式，主要有两种：</span><br><span class="line">-b a ：表示不论是否为空行，也同样列出行号（类似 cat -n）；</span><br><span class="line">-b t ：如果有空行，空的那一行不要列出行号（默认值）；</span><br><span class="line">-n ：列出行号表示的方法，主要有三种：</span><br><span class="line">-n ln ：行号在屏幕的最左方显示；</span><br><span class="line">-n rn ：行号在自己字段的最右方显示，且不加 0 ；</span><br><span class="line">-n rz ：行号在自己字段的最右方显示，且加 0 ；</span><br><span class="line">-w ：行号字段的占用的字符数。</span><br></pre></td></tr></table></figure><h3 id="可翻页检视"><a href="#可翻页检视" class="headerlink" title="可翻页检视"></a>可翻页检视</h3><h4 id="more-（一页一页翻动）"><a href="#more-（一页一页翻动）" class="headerlink" title="more （一页一页翻动）"></a>more （一页一页翻动）</h4><ul><li>空白键 （space）：代表向下翻一页；</li><li>Enter ：代表向下翻“一行”；</li><li>/字串 ：代表在这个显示的内容当中，向下搜寻“字串”这个关键字；</li><li>:f ：立刻显示出文件名以及目前显示的行数；</li><li>q ：代表立刻离开 more ，不再显示该文件内容。</li><li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li></ul><h4 id="less-（一页一页翻动）"><a href="#less-（一页一页翻动）" class="headerlink" title="less （一页一页翻动）"></a>less （一页一页翻动）</h4><ul><li>空白键 ：向下翻动一页；</li><li>[pagedown]：向下翻动一页；</li><li>[pageup] ：向上翻动一页；</li><li>/字串 ：向下搜寻“字串”的功能；</li><li>?字串 ：向上搜寻“字串”的功能；</li><li>n ：重复前一个搜寻 （与 / 或 ? 有关！）</li><li>N ：反向的重复前一个搜寻 （与 / 或 ? 有关！）</li><li>g ：前进到这个数据的第一行去；</li><li>G ：前进到这个数据的最后一行去 （注意大小写）；</li><li>q ：离开 less 这个程序；</li></ul><h3 id="数据撷取"><a href="#数据撷取" class="headerlink" title="数据撷取"></a>数据撷取</h3><h4 id="head-（取出前面几行）"><a href="#head-（取出前面几行）" class="headerlink" title="head （取出前面几行）"></a>head （取出前面几行）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]$ head [-n number] 文件</span><br><span class="line">选项与参数：</span><br><span class="line">-n ：后面接数字，代表显示几行的意思</span><br></pre></td></tr></table></figure><h4 id="tail-（取出后面几行）"><a href="#tail-（取出后面几行）" class="headerlink" title="tail （取出后面几行）"></a>tail （取出后面几行）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]<span class="comment"># tail [-n number] 文件</span></span><br><span class="line">选项与参数：</span><br><span class="line">-n ：后面接数字，代表显示几行的意思</span><br><span class="line">-f ：表示持续侦测后面所接的文件名，要等到按下[ctrl]-c才会结束tail的侦测</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="非纯文本文件：-od"><a href="#非纯文本文件：-od" class="headerlink" title="非纯文本文件： od"></a>非纯文本文件： od</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]$ od [-t TYPE] 文件</span><br><span class="line">选项或参数：</span><br><span class="line">-t ：后面可以接各种“类型 （TYPE）”的输出，例如：</span><br><span class="line">    a ：利用默认的字符来输出；</span><br><span class="line">    c ：使用 ASCII 字符来输出</span><br><span class="line">    d[size] ：利用十进制（decimal）来输出数据，每个整数占用 size Bytes；</span><br><span class="line">    f[size] ：利用浮点数值（floating）来输出数据，每个数占用 size Bytes；</span><br><span class="line">    o[size] ：利用八进位（octal）来输出数据，每个整数占用 size Bytes；</span><br><span class="line">    x[size] ：利用十六进制（hexadecimal）来输出数据，每个整数占用 size Bytes；</span><br></pre></td></tr></table></figure><h3 id="修改文件时间或创建新文件：-touch"><a href="#修改文件时间或创建新文件：-touch" class="headerlink" title="修改文件时间或创建新文件： touch"></a>修改文件时间或创建新文件： touch</h3><p>linux文件的三个时间：</p><ol><li>modification time （mtime）： 当该文件的“内容数据”变更时，就会更新这个时间！内容数据指的是文件的内容，而不是文件的属性或权限喔！</li><li>status time （ctime）： 当该文件的“状态 （status）”改变时，就会更新这个时间，举例来说，像是权限与属性被更改了，都会更新这个时间啊。</li><li>access time （atime）： 当“该文件的内容被取用”时，就会更新这个读取时间（access）。举例来说，我们使用 cat 去读取 /etc/man_db.conf ， 就会更新该文件的atime 了。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]$ touch [-acdmt] 文件</span><br><span class="line">选项与参数：</span><br><span class="line">-a ：仅修订 access time；</span><br><span class="line">-c ：仅修改文件的时间，若该文件不存在则不创建新文件；</span><br><span class="line">-d ：后面可以接欲修订的日期而不用目前的日期，也可以使用 --date=<span class="string">&quot;日期或时间&quot;</span></span><br><span class="line">-m ：仅修改 mtime ；</span><br><span class="line">-t ：后面可以接欲修订的时间而不用目前的时间，格式为[YYYYMMDDhhmm]</span><br></pre></td></tr></table></figure><h2 id="文件与目录的默认权限与隐藏权限"><a href="#文件与目录的默认权限与隐藏权限" class="headerlink" title="文件与目录的默认权限与隐藏权限"></a>文件与目录的默认权限与隐藏权限</h2><h3 id="文件默认权限：umask"><a href="#文件默认权限：umask" class="headerlink" title="文件默认权限：umask"></a>文件默认权限：umask</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]$ <span class="built_in">umask</span></span><br><span class="line">0022 &amp;lt;==与一般权限有关的是后面三个数字！</span><br><span class="line">[root@study ~]$ <span class="built_in">umask</span> -S</span><br><span class="line">u=rwx,g=rx,o=rx</span><br></pre></td></tr></table></figure><ul><li>umask的利用与重要性：专题制作</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]$ <span class="built_in">umask</span> 002</span><br><span class="line">[root@study ~]$ touch test3</span><br><span class="line">[root@study ~]$ mkdir test4</span><br><span class="line">[root@study ~]$ ll -d <span class="built_in">test</span>[34] <span class="comment"># 中括号 [ ] 代表中间有个指定的字符，而不是任意字符的意思</span></span><br><span class="line">-rw-rw-r--. 1 root root 0 6月 16 01:12 test3</span><br><span class="line">drwxrwxr-x. 2 root root 6 6月 16 01:12 test4</span><br></pre></td></tr></table></figure><blockquote><p>umask 对于新建文件与目录的默认权限是很有关系的！这个概念可以用在任何服务器上面， 尤其是未来在你架设文件服务器 （file server） ，举例来说， SAMBA Server或者是 FTP server 时， 都是很重要的观念！这牵涉到你的使用者是否能够将文件进一步利用的问题喔！不要等闲视之！</p></blockquote><h3 id="文件隐藏属性"><a href="#文件隐藏属性" class="headerlink" title="文件隐藏属性"></a>文件隐藏属性</h3><blockquote><p>chattr指令只能在Ext2/Ext3/Ext4的 Linux 传统文件系统上面完整生效， 其他的文件系统可能<br>就无法完整的支持这个指令了，例如 xfs 仅支持部份参数而已。</p></blockquote><h4 id="chattr-（设置文件隐藏属性）"><a href="#chattr-（设置文件隐藏属性）" class="headerlink" title="chattr （设置文件隐藏属性）"></a>chattr （设置文件隐藏属性）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]$ chattr [+-=][ASacdistu] 文件或目录名称</span><br><span class="line">选项与参数：</span><br><span class="line">+ ：增加某一个特殊参数，其他原本存在参数则不动。</span><br><span class="line">- ：移除某一个特殊参数，其他原本存在参数则不动。</span><br><span class="line">= ：设置一定，且仅有后面接的参数</span><br><span class="line">A ：当设置了 A 这个属性时，若你有存取此文件（或目录）时，他的存取时间 atime 将不会被修改，可避免 I/O 较慢的机器过度的存取磁盘。（目前建议使用文件系统挂载参数处理这个项目）</span><br><span class="line">S ：一般文件是非同步写入磁盘的（原理请参考[前一章sync](../Text/index.html<span class="comment">#sync)的说明），如果加上 S 这个属性时，当你进行任何文件的修改，该更动会“同步”写入磁盘中。</span></span><br><span class="line">a ：当设置 a 之后，这个文件将只能增加数据，而不能删除也不能修改数据，只有root 才能设置这属性</span><br><span class="line">c ：这个属性设置之后，将会自动的将此文件“压缩”，在读取的时候将会自动解压缩，但是在储存的时候，将会先进行压缩后再储存（看来对于大文件似乎蛮有用的！）</span><br><span class="line">d ：当 dump 程序被执行的时候，设置 d 属性将可使该文件（或目录）不会被 dump 备份</span><br><span class="line">i ：这个 i 可就很厉害了！他可以让一个文件“不能被删除、改名、设置链接也无法写入或新增数据！”</span><br><span class="line">    对于系统安全性有相当大的助益！只有 root 能设置此属性</span><br><span class="line">s ：当文件设置了 s 属性时，如果这个文件被删除，他将会被完全的移除出这个硬盘空间，所以如果误删了，完全无法救回来了喔！</span><br><span class="line">u ：与 s 相反的，当使用 u 来设置文件时，如果该文件被删除了，则数据内容其实还存在磁盘中，可以使用来救援该文件喔！</span><br><span class="line">注意1：属性设置常见的是 a 与 i 的设置值，而且很多设置值必须要身为 root 才能设置</span><br><span class="line">注意2：xfs 文件系统仅支持 AadiS 而已</span><br></pre></td></tr></table></figure><h4 id="lsattr-（显示文件隐藏属性）"><a href="#lsattr-（显示文件隐藏属性）" class="headerlink" title="lsattr （显示文件隐藏属性）"></a>lsattr （显示文件隐藏属性）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]$ lsattr [-adR] 文件或目录</span><br><span class="line">选项与参数：</span><br><span class="line">-a ：将隐藏文件的属性也秀出来；</span><br><span class="line">-d ：如果接的是目录，仅列出目录本身的属性而非目录内的文件名；</span><br><span class="line">-R ：连同子目录的数据也一并列出来！</span><br></pre></td></tr></table></figure><h3 id="文件特殊权限：-SUID-SGID-SBIT"><a href="#文件特殊权限：-SUID-SGID-SBIT" class="headerlink" title="文件特殊权限： SUID, SGID, SBIT"></a>文件特殊权限： SUID, SGID, SBIT</h3><h4 id="Set-UID"><a href="#Set-UID" class="headerlink" title="Set UID"></a>Set UID</h4><p>当 s 这个标志出现在文件拥有者的 x 权限上时，例如刚刚提到的 /usr/bin/passwd 这个文件的权限状态：“-rwsr-xr-x”，此时就被称为 Set UID，简称为 SUID 的特殊权限。</p><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/15/CwAVepj3aNsT4KG.png" alt="SUID程序执行的过程示意图"></p><ul><li>SUID 权限仅对二进制程序（binary program）有效；</li><li>执行者对于该程序需要具有 x 的可执行权限；</li><li>本权限仅在执行该程序的过程中有效 （run-time）；</li><li>执行者将具有该程序拥有者 （owner） 的权限。</li><li>SUID 不能用在shell script和目录上面。</li></ul><h4 id="Set-GID"><a href="#Set-GID" class="headerlink" title="Set GID"></a>Set GID</h4><p>当s 在群组的 x 时则称为 Set GID, SGID</p><p>与 SUID 不同的是，SGID 可以针对文件或目录来设置！</p><p>对文件来说：</p><ul><li>SGID 对二进制程序有用；</li><li>程序执行者对于该程序来说，需具备 x 的权限；</li><li>执行者在执行的过程中将会获得该程序群组的支持！</li></ul><p>对目录来说：</p><ul><li>使用者若对于此目录具有 r 与 x 的权限时，该使用者能够进入此目录；</li><li>使用者在此目录下的有效群组（effective group）将会变成该目录的群组；</li><li>用途：若使用者在此目录下具有 w 的权限（可以新建文件），则使用者所创建的新文件，该新文件的群组与此目录的群组相同。</li></ul><h4 id="Sticky-Bit"><a href="#Sticky-Bit" class="headerlink" title="Sticky Bit"></a>Sticky Bit</h4><p>Sticky Bit, SBIT 目前只针对目录有效。</p><p>作用是:</p><ul><li>当使用者对于此目录具有 w, x 权限，亦即具有写入的权限时；</li><li>当使用者在该目录下创建文件或目录时，仅有自己与 root 才有权力删除该文件</li></ul><h4 id="SUID-SGID-SBIT-权限设置"><a href="#SUID-SGID-SBIT-权限设置" class="headerlink" title="SUID/SGID/SBIT 权限设置"></a>SUID/SGID/SBIT 权限设置</h4><ul><li>4 为 SUID</li><li>2 为 SGID</li><li>1 为 SBIT</li></ul><p>假设要将一个文件权限改为“-rwsr-xr-x”时，由于 s 在使用者权限中，所以是 SUID ，因此，在原先的 755 之前还要加上 4 ，也就是：“ chmod 4755 filename ”来设置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]$ <span class="built_in">cd</span> /tmp</span><br><span class="line">[root@study tmp]$ touch <span class="built_in">test</span> &amp;lt;==创建一个测试用空档</span><br><span class="line">[root@study tmp]$ chmod 4755 <span class="built_in">test</span>; ls -l <span class="built_in">test</span> &amp;lt;==加入具有 SUID 的权限</span><br><span class="line">-rwsr-xr-x 1 root root 0 Jun 16 02:53 <span class="built_in">test</span></span><br><span class="line">[root@study tmp]$ chmod 6755 <span class="built_in">test</span>; ls -l <span class="built_in">test</span> &amp;lt;==加入具有 SUID/SGID 的权限</span><br><span class="line">-rwsr-sr-x 1 root root 0 Jun 16 02:53 <span class="built_in">test</span></span><br><span class="line">[root@study tmp]$ chmod 1755 <span class="built_in">test</span>; ls -l <span class="built_in">test</span> &amp;lt;==加入 SBIT 的功能！</span><br><span class="line">-rwxr-xr-t 1 root root 0 Jun 16 02:53 <span class="built_in">test</span></span><br><span class="line">[root@study tmp]$ chmod 7666 <span class="built_in">test</span>; ls -l <span class="built_in">test</span> &amp;lt;==具有空的 SUID/SGID 权限</span><br><span class="line">-rwSrwSrwT 1 root root 0 Jun 16 02:53 <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>最后一个例子出现大写的 S 与 T ，是因为 s 与 t都是取代 x 这个权限的，但是下达的权限是 7666，也就是说， user,group 以及 others 都没有 x 这个可执行的标志（ 因为 666 ），所以，这个 S, T 代表的就是“空的”，即都没有执行权限。</p><blockquote><p>SUID 为 u+s ，而 SGID 为 g+s ，SBIT 则是 o+t 符号法</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置权限成为 -rws--x--x 的模样：</span></span><br><span class="line">[root@study tmp]$ chmod u=rwxs,go=x <span class="built_in">test</span>; ls -l <span class="built_in">test</span></span><br><span class="line">-rws--x--x 1 root root 0 Jun 16 02:53 <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 承上，加上 SGID 与 SBIT 在上述的文件权限中！</span></span><br><span class="line">[root@study tmp]$ chmod g+s,o+t <span class="built_in">test</span>; ls -l <span class="built_in">test</span></span><br><span class="line">-rws--s--t 1 root root 0 Jun 16 02:53 <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="观察文件类型：file"><a href="#观察文件类型：file" class="headerlink" title="观察文件类型：file"></a>观察文件类型：file</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]$ file ~/.bashrc</span><br><span class="line">/root/.bashrc: ASCII text &amp;lt;==告诉我们是 ASCII 的纯文本文件啊！</span><br><span class="line">[root@study ~]$ file /usr/bin/passwd</span><br><span class="line">/usr/bin/passwd: setuid ELF 64-bit LSB shared object, x86-64, version 1 （SYSV）, dynamically</span><br><span class="line">linked （uses shared libs）, <span class="keyword">for</span> GNU/Linux 2.6.32,</span><br><span class="line">BuildID[sha1]=0xbf35571e607e317bf107b9bcf65199988d0ed5ab, stripped</span><br><span class="line"><span class="comment"># 可执行文件的数据可就多的不得了！包括这个文件的 suid 权限、相容于 Intel x86-64 等级的硬件平台</span></span><br><span class="line"><span class="comment"># 使用的是 Linux 核心 2.6.32 的动态函数库链接等等。</span></span><br><span class="line">[root@study ~]$ file /var/lib/mlocate/mlocate.db</span><br><span class="line">/var/lib/mlocate/mlocate.db: data &amp;lt;== 这是 data 文件！</span><br></pre></td></tr></table></figure><h2 id="指令与文件的搜寻"><a href="#指令与文件的搜寻" class="headerlink" title="指令与文件的搜寻"></a>指令与文件的搜寻</h2><h3 id="指令文件名的搜寻"><a href="#指令文件名的搜寻" class="headerlink" title="指令文件名的搜寻"></a>指令文件名的搜寻</h3><ul><li>which （寻找“可执行文件”）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]$ <span class="built_in">which</span> [-a] <span class="built_in">command</span></span><br><span class="line">选项或参数：</span><br><span class="line">-a ：将所有由 PATH 目录中可以找到的指令均列出，而不止第一个被找到的指令名称</span><br></pre></td></tr></table></figure><h3 id="文件文件名的搜寻"><a href="#文件文件名的搜寻" class="headerlink" title="文件文件名的搜寻"></a>文件文件名的搜寻</h3><h4 id="whereis-（由一些特定的目录中寻找文件文件名）"><a href="#whereis-（由一些特定的目录中寻找文件文件名）" class="headerlink" title="whereis （由一些特定的目录中寻找文件文件名）"></a>whereis （由一些特定的目录中寻找文件文件名）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]$ whereis [-bmsu] 文件或目录名</span><br><span class="line">选项与参数：</span><br><span class="line">-l :可以列出 whereis 会去查询的几个主要目录而已</span><br><span class="line">-b :只找 binary 格式的文件</span><br><span class="line">-m :只找在说明文档 manual 路径下的文件</span><br><span class="line">-s :只找 <span class="built_in">source</span> 来源文件</span><br><span class="line">-u :搜寻不在上述三个项目当中的其他特殊文件</span><br></pre></td></tr></table></figure><h4 id="locate-updatedb"><a href="#locate-updatedb" class="headerlink" title="locate / updatedb"></a>locate / updatedb</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]$ locate [-ir] keyword</span><br><span class="line">选项与参数：</span><br><span class="line">-i ：忽略大小写的差异；</span><br><span class="line">-c ：不输出文件名，仅计算找到的文件数量</span><br><span class="line">-l ：仅输出几行的意思，例如输出五行则是 -l 5</span><br><span class="line">-S ：输出 locate 所使用的数据库文件的相关信息，包括该数据库纪录的文件/目录数量等</span><br><span class="line">-r ：后面可接正则表达式的显示方式</span><br></pre></td></tr></table></figure><p>更新 locate 数据库直接输入“updatedb ”就可以了！</p><p>updatedb 指令会去读取 /etc/updatedb.conf 这个配置文件的设置，然后再去硬盘里面进行搜寻文件名的动作， 最后就更新整个数据库文件啰！因为 updatedb 会去搜寻硬盘，所以当你执行 updatedb 时，可能会等待数分钟的时间喔！</p><ul><li>updatedb：根据 /etc/updatedb.conf 的设置去搜寻系统硬盘内的文件名，并更新/var/lib/mlocate 内的数据库文件；</li><li>locate：依据 /var/lib/mlocate 内的数据库记载，找出使用者输入的关键字文件名。</li></ul><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]$ find [PATH] [option] [action]</span><br><span class="line">选项与参数：</span><br><span class="line">1\. 与时间有关的选项：共有 -atime, -ctime 与 -mtime ，以 -mtime 说明</span><br><span class="line">    -mtime n ：n 为数字，意义为在 n 天之前的“一天之内”被更动过内容的文件；</span><br><span class="line">    -mtime +n ：列出在 n 天之前（不含 n 天本身）被更动过内容的文件文件名；</span><br><span class="line">    -mtime -n ：列出在 n 天之内（含 n 天本身）被更动过内容的文件文件名。</span><br><span class="line">    -newer file ：file 为一个存在的文件，列出比 file 还要新的文件文件名</span><br><span class="line"></span><br><span class="line">2\. 与使用者或群组名称有关的参数：</span><br><span class="line">    -uid n ：n 为数字，这个数字是使用者的帐号 ID，亦即 UID ，这个 UID 是记录在/etc/passwd 里面与帐号名称对应的数字。</span><br><span class="line">    -gid n ：n 为数字，这个数字是群组名称的 ID，亦即 GID，这个 GID 记录在/etc/group，相关的介绍我们会第四篇说明～</span><br><span class="line">    -user name ：name 为使用者帐号名称喔！例如 dmtsai</span><br><span class="line">    -group name：name 为群组名称喔，例如 users ；</span><br><span class="line">    -nouser ：寻找文件的拥有者不存在 /etc/passwd 的人！</span><br><span class="line">    -nogroup ：寻找文件的拥有群组不存在于 /etc/group 的文件！</span><br><span class="line">    当你自行安装软件时，很可能该软件的属性当中并没有文件拥有者，这是可能的！在这个时候，就可以使用 -nouser 与 -nogroup 搜寻。</span><br><span class="line"></span><br><span class="line">3\. 与文件权限及名称有关的参数：</span><br><span class="line">    -name filename：搜寻文件名称为 filename 的文件；</span><br><span class="line">    -size [+-]SIZE：搜寻比 SIZE 还要大（+）或小（-）的文件。这个 SIZE 的规格有：</span><br><span class="line">    c: 代表 Byte， k: 代表 1024Bytes。所以，要找比 50KB</span><br><span class="line">还要大的文件，就是“ -size +50k ”</span><br><span class="line">    -<span class="built_in">type</span> TYPE ：搜寻文件的类型为 TYPE 的，类型主要有：一般正规文件 （f）, 设备文件 （b, c）,目录 （d）, 链接文件（l）, socket （s）, 及 FIFO （p） 等属性。</span><br><span class="line">    -perm mode ：搜寻文件权限“刚好等于” mode 的文件，这个 mode 为类似 chmod的属性值，举例来说， -rwsr-xr-x 的属性为 4755 ！</span><br><span class="line">    -perm -mode ：搜寻文件权限“必须要全部囊括 mode 的权限”的文件，举例来说，我们要搜寻 -rwxr--r-- ，亦即 0744 的文件，使用 -perm -0744，当一个文件的权限为 -rwsr-xr-x ，亦即 4755 时，也会被列出来，因为 -rwsr-xr-x 的属性已经囊括了 -rwxr--r-- 的属性了。</span><br><span class="line">    -perm /mode ：搜寻文件权限“包含任一 mode 的权限”的文件，举例来说，我们搜寻-rwxr-xr-x ，亦即 -perm /755 时，但一个文件属性为 -rw-------也会被列出来，因为他有 -rw.... 的属性存在！</span><br><span class="line"></span><br><span class="line">4\. 额外可进行的动作：</span><br><span class="line">    -<span class="built_in">exec</span> <span class="built_in">command</span> ：<span class="built_in">command</span> 为其他指令，-<span class="built_in">exec</span> 后面可再接额外的指令来处理搜寻到的结果。</span><br><span class="line">    -<span class="built_in">print</span> ：将结果打印到屏幕上，这个动作是默认动作！</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/15/FHDNTPkEy2lKA8o.png" alt="find 相关的时间参数意义"></p><ul><li>+4代表大于等于5天前的文件名：ex&gt; find /var -mtime +4</li><li>-4代表小于等于4天内的文件文件名：ex&gt; find /var -mtime -4</li><li>4则是代表4-5那一天的文件文件名：ex&gt; find /var -mtime 4</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/15/uYrJCxepsDLOi2S.png" alt="find 相关的额外动作"></p><p>该范例中特殊的地方有 {} 以及 ; 还有 -exec 这个关键字，这些东西的意义为：</p><ul><li>{} 代表的是“由 find 找到的内容”，如上图所示，find 的结果会被放置到 {} 位置中；</li><li>-exec 一直到 ; 是关键字，代表 find 额外动作的开始 （-exec） 到结束 （;） ，在这中间的就是 find 指令内的额外动作。 在本例中就是“ ls -l {} ”啰！</li><li>因为“ ; ”在 bash 环境下是有特殊意义的，因此利用反斜线来跳脱。</li></ul><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><ol><li><p>让使用者能进入某目录成为“可工作目录”的基本权限为何：</p><ul><li>可使用的指令：例如 cd 等变换工作目录的指令；</li><li>目录所需权限：使用者对这个目录至少需要具有 x 的权限</li><li>额外需求：如果使用者想要在这个目录内利用 ls 查阅文件名，则使用者对此目录还需要 r的权限。</li></ul></li><li><p>使用者在某个目录内读取一个文件的基本权限为何？</p><ul><li>可使用的指令：例如本章谈到的 cat, more, less等等</li><li>目录所需权限：使用者对这个目录至少需要具有 x 权限；</li><li>文件所需权限：使用者对文件至少需要具有 r 的权限才行！</li></ul></li><li><p>让使用者可以修改一个文件的基本权限为何？</p><ul><li>可使用的指令：例如 nano 或未来要介绍的 vi 编辑器等；</li><li>目录所需权限：使用者在该文件所在的目录至少要有 x 权限；</li><li>文件所需权限：使用者对该文件至少要有 r, w 权限</li></ul></li><li><p>让一个使用者可以创建一个文件的基本权限为何？</p><ul><li>目录所需权限：使用者在该目录要具有 w,x 的权限，重点在 w 啦！</li></ul></li><li><p>让使用者进入某目录并执行该目录下的某个指令之基本权限为何？</p><ul><li>目录所需权限：使用者在该目录至少要有 x 的权限；</li><li>文件所需权限：使用者在该文件至少需要有 x 的权限</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件 </tag>
            
            <tag> 目录管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 的文件权限与目录配置</title>
      <link href="/2020/09/10/Linux%20%E7%9A%84%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%B8%8E%E7%9B%AE%E5%BD%95%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/09/10/Linux%20%E7%9A%84%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%B8%8E%E7%9B%AE%E5%BD%95%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Linux一般将文件可存取的身份分为三个类别，分别是 owner/group/others，且三种身份各有 read/write/execute 等权限。</p></blockquote><h2 id="使用者与群组"><a href="#使用者与群组" class="headerlink" title="使用者与群组"></a>使用者与群组</h2><h3 id="文件拥有者"><a href="#文件拥有者" class="headerlink" title="文件拥有者"></a>文件拥有者</h3><p>由于Linux是个多用户多任务的系统, 所以可以设置为只文件拥有者才可查看或修改，其他人无法查看修改</p><h3 id="群组概念"><a href="#群组概念" class="headerlink" title="群组概念"></a>群组概念</h3><p>以团队形式来共享，分割可查看，修改的权限。</p><h3 id="其他人"><a href="#其他人" class="headerlink" title="其他人"></a>其他人</h3><p>既不是文件拥有者，又不是群组里的人，root除外。</p><h3 id="Linux-使用者身份与群组记录的文件"><a href="#Linux-使用者身份与群组记录的文件" class="headerlink" title="Linux 使用者身份与群组记录的文件"></a>Linux 使用者身份与群组记录的文件</h3><p>默认的情况下：</p><ol><li>所有的系统上的帐号与一般身份使用者，还有root， 记录在 /etc/passwd</li><li>个人的密码则是记录在 /etc/shadow </li><li>Linux所有的群组名称都纪录在 /etc/group</li></ol><h2 id="Linux-文件权限概念"><a href="#Linux-文件权限概念" class="headerlink" title="Linux 文件权限概念"></a>Linux 文件权限概念</h2><h3 id="Linux文件属性"><a href="#Linux文件属性" class="headerlink" title="Linux文件属性"></a>Linux文件属性</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/blackgane/cdn_article@master/article_cdn/ls.jpg" alt="ls -al"></p><ol><li><p>第一栏代表这个文件的类型与权限（permission）</p><p> <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/blackgane/cdn_article@master/article_cdn/permission.jpg" alt="文件的类型与权限之内容"></p><ol><li><p>第一个字符代表这个文件是“目录、文件或链接文件等等”：</p><ul><li>当为[ d ]则是目录，例如上表文件名为“.config”的那一行；</li><li>当为[ - ]则是文件，例如上表文件名为“initial-setup-ks.cfg”那一行；</li><li>若是[ l ]则表示为链接文件（link file）；</li><li>若是[ b ]则表示为设备文件里面的可供储存的周边设备（可随机存取设备）；</li><li>若是[ c ]则表示为设备文件里面的序列埠设备，例如键盘、鼠标（一次性读取设备）。</li></ul></li><li><p>接下来的字符中，以三个为一组，且均为“rwx” 的三个参数的组合。</p><ul><li>[ r ]代表可读（read）、[ w ]代表可写（write）、[ x ]代表可执行（execute）</li><li>要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。</li><li>第一组为“文件拥有者可具备的权限”，以“initial-setup-ks.cfg”那个文件为例， 该文件的拥有者可以读写，但不可执行；</li><li>第二组为“加入此群组之帐号的权限”；</li><li>第三组为“非本人且没有加入本群组之其他帐号的权限”。</li></ul></li></ol></li><li><p>第二栏表示有多少文件名链接到此节点（i-node）</p></li><li><p>第三栏表示这个文件（或目录）的“拥有者帐号”</p></li><li><p>第四栏表示这个文件的所属群组</p></li><li><p>第五栏为这个文件的容量大小，默认单位为Bytes；</p></li><li><p>第六栏为这个文件的创建日期或者是最近的修改日期</p></li><li><p>第七栏为这个文件的文件名</p></li></ol><h3 id="如何改变文件属性与权限"><a href="#如何改变文件属性与权限" class="headerlink" title="如何改变文件属性与权限"></a>如何改变文件属性与权限</h3><ul><li>chgrp ：改变文件所属群组</li><li>chown ：改变文件拥有者</li><li>chmod ：改变文件的权限, SUID, SGID, SBIT等等的特性</li></ul><h4 id="改变所属群组-chgrp"><a href="#改变所属群组-chgrp" class="headerlink" title="改变所属群组, chgrp"></a>改变所属群组, chgrp</h4><ul><li>被改变的群组名称必须要在/etc/group文件内存在才行，否则就会显示错误</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]<span class="comment"># chgrp [-R] dirname/filename ...</span></span><br><span class="line">选项与参数：</span><br><span class="line">-R : 进行递回（recursive）的持续变更，亦即连同次目录下的所有文件、目录</span><br><span class="line">都更新成为这个群组之意。常常用在变更某一目录内所有的文件之情况。</span><br><span class="line">范例：</span><br><span class="line">[root@study ~]<span class="comment"># chgrp users initial-setup-ks.cfg</span></span><br><span class="line">[root@study ~]<span class="comment"># ls -l</span></span><br><span class="line">-rw-r--r--. 1 root users 1864 May 4 18:01 initial-setup-ks.cfg</span><br><span class="line">[root@study ~]<span class="comment"># chgrp testing initial-setup-ks.cfg</span></span><br><span class="line">chgrp: invalid group: testing</span><br></pre></td></tr></table></figure><h4 id="改变文件拥有者-chown"><a href="#改变文件拥有者-chown" class="headerlink" title="改变文件拥有者, chown"></a>改变文件拥有者, chown</h4><ul><li>在/etc/passwd 这个文件中有纪录的使用者名称才能改变</li><li>可以顺便直接修改群组的名称<code>chown [-R] 帐号名称:群组名称 文件或目录</code></li><li><code>:</code> 可以用 <code>.</code> 替换推荐 <code>:</code></li><li>chown也能单纯的修改所属群组呢！ 例如“chown .sshd initial-setup-ks.cfg”就是修改群组，就是那个小数点的用途！</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]<span class="comment"># chown [-R] 帐号名称 文件或目录</span></span><br><span class="line">[root@study ~]<span class="comment"># chown [-R] 帐号名称:群组名称 文件或目录</span></span><br><span class="line">选项与参数：</span><br><span class="line">-R : 进行递回（recursive）的持续变更，亦即连同次目录下的所有文件都变更</span><br><span class="line">范例：将 initial-setup-ks.cfg 的拥有者改为bin这个帐号：</span><br><span class="line">[root@study ~]<span class="comment"># chown bin initial-setup-ks.cfg</span></span><br><span class="line">[root@study ~]<span class="comment"># ls -l</span></span><br><span class="line">-rw-r--r--. 1 bin users 1864 May 4 18:01 initial-setup-ks.cfg</span><br><span class="line">范例：将 initial-setup-ks.cfg 的拥有者与群组改回为root：</span><br><span class="line">[root@study ~]<span class="comment"># chown root:root initial-setup-ks.cfg</span></span><br><span class="line">[root@study ~]<span class="comment"># ls -l</span></span><br><span class="line">-rw-r--r--. 1 root root 1864 May 4 18:01 initial-setup-ks.cfg</span><br></pre></td></tr></table></figure><h4 id="改变权限-chmod"><a href="#改变权限-chmod" class="headerlink" title="改变权限, chmod"></a>改变权限, chmod</h4><ol><li><p>数字类型改变文件权限</p><blockquote><p>r, w, x 分别对应数字 4, 2, 1</p></blockquote><p> 每种身份（owner/group/others）各自的三个权限（r/w/x）分数是需要累加的，例如当权限为： [-rwxrwx—] 分数则是：</p><blockquote><p>owner = rwx = 4+2+1 = 7 &gt; group = rwx = 4+2+1 = 7 &gt; others= — = 0+0+0 = 0  即该文件权限为770</p></blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]<span class="comment"># chmod [-R] xyz 文件或目录</span></span><br><span class="line">选项与参数：</span><br><span class="line">xyz : 就是刚刚提到的数字类型的权限属性，为 rwx 属性数值的相加。</span><br><span class="line">-R : 进行递回（recursive）的持续变更，亦即连同次目录下的所有文件都会变更</span><br></pre></td></tr></table></figure><ul><li>vim编辑后的文件默认是664 —— -rw-rw-r–</li><li>需要变成可执行文件是755 —— -rwxr-xr-x</li></ul></li><li><p>符号类型改变文件权限</p><blockquote><p>user, group, others, all 分别对应字母 u, g, o, a</p></blockquote><ul><li>| chmod | u g o a | +（加入） -（除去） =（设置） | r w x | 文件或目录 |</li></ul></li></ol><h3 id="目录与文件之权限意义"><a href="#目录与文件之权限意义" class="headerlink" title="目录与文件之权限意义"></a>目录与文件之权限意义</h3><p>一个文件可以具有的权限有：可读、可写、可执行权限</p><table><thead><tr><th>权限</th><th>具体内容</th></tr></thead><tbody><tr><td>r</td><td>可读权限—read<br>对文件：具有显示文件内容的权限<br>对目录：具有浏览目录的权限，可以查看目录内容，但是无法进入目录</td></tr><tr><td>w</td><td>可写权限—write<br>对文件：具有编辑和删除文件的权限<br>对目录：具有删除和移动目录的权限</td></tr><tr><td>x</td><td>可执行权限—excute<br>对文件：具有执行文件的权限<br>对目录：具有进入目录的权限</td></tr></tbody></table><h3 id="Linux文件种类与扩展名"><a href="#Linux文件种类与扩展名" class="headerlink" title="Linux文件种类与扩展名"></a>Linux文件种类与扩展名</h3><table><thead><tr><th>文件种类</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>正规文件（regular file）</td><td>第一个属性为 [ - ]</td><td>纯文本文件（ASCII）<br>二进制档（binary）<br>数据格式文件（data）</td></tr><tr><td>目录（directory）</td><td>第一个属性为 [ d ]</td><td>如 [drwxrwxrwx]</td></tr><tr><td>链接文件（link）</td><td>第一个属性为 [ l ]</td><td>类似Windows中的快捷方式</td></tr><tr><td>设备与设备文件（device）</td><td>第一个属性为[ b ]<br>第一个属性为[ c ]</td><td>区块（block）设备文件 储存设备<br>字符（character）设备文件 外设</td></tr><tr><td>数据接口文件（sockets）</td><td>第一个属性为 [ s ]</td><td>最常在/run或/tmp这些个目录中看到这种文件类型</td></tr><tr><td>数据输送档（FIFO, pipe）</td><td>第一个属性为[p]</td><td>目的在解决多个程序同时存取一个文件所造成的错误问题</td></tr></tbody></table><h2 id="Linux目录配置"><a href="#Linux目录配置" class="headerlink" title="Linux目录配置"></a>Linux目录配置</h2><h3 id="Linux目录配置的依据–FHS"><a href="#Linux目录配置的依据–FHS" class="headerlink" title="Linux目录配置的依据–FHS"></a>Linux目录配置的依据–FHS</h3><p>Filesystem Hierarchy Standard （FHS）标准</p><ul><li>/ （root, 根目录）：与开机系统有关；</li><li>/usr （unix software resource）：与软件安装/执行有关；</li><li>/var （variable）：与系统运行过程有关。</li></ul><h4 id="根目录-（-）-的意义与内容"><a href="#根目录-（-）-的意义与内容" class="headerlink" title="根目录 （/） 的意义与内容"></a>根目录 （/） 的意义与内容</h4><table><thead><tr><th></th><th>可分享的（shareable）</th><th>不可分享的（unshareable）</th></tr></thead><tbody><tr><td>不变的（static）</td><td>/usr （软件放置处）</td><td>/etc （配置文件）</td></tr><tr><td></td><td>/opt （第三方协力软件）</td><td>/boot （开机与核心档）</td></tr><tr><td>可变动的（variable）</td><td>/var/mail （使用者邮件信箱）</td><td>/var/run （程序关）</td></tr><tr><td></td><td>/var/spool/news （新闻群组）</td><td>/var/lock （程序相关）</td></tr></tbody></table><blockquote><p>具体内容参看鸟哥Linux私房菜第四版p281</p></blockquote><ul><li>根目录越小越好。 如此不但性能较佳，根目录所在的文件系统也较不容易发生问题。</li></ul><table><thead><tr><th>目录</th><th>应放置文件内容</th></tr></thead><tbody><tr><td>/lost+found</td><td>这个目录是使用标准的ext2/ext3/ext4文件系统格式才会产生的一个目录，目的在于当文件系统发生错误时， 将一些遗失的片段放置到这个目录下。不过如果使用的是 xfs 文件系统的话，就不会存在这个目录了！</td></tr><tr><td>/proc</td><td>这个目录本身是一个“虚拟文件系统（virtual filesystem）”喔！他放置的数据都是在内存当中， 例如系统核心、行程信息（process）、周边设备的状态及网络状态等等。因为这个目录下的数据都是在内存当中， 所以本身不占任何硬盘空间啊！比较重要的文件例如：/proc/cpuinfo, /proc/dma,/proc/interrupts, /proc/ioports, /proc/net/* 等等。</td></tr><tr><td>/sys</td><td>这个目录其实跟/proc非常类似，也是一个虚拟的文件系统，主要也是记录核心与系统硬件信息较相关的信息。 包括目前已载入的核心模块与核心侦测到的硬件设备信息等等。这个目录同样不占硬盘容量喔</td></tr></tbody></table><h4 id="usr-的意义与内容"><a href="#usr-的意义与内容" class="headerlink" title="/usr 的意义与内容"></a>/usr 的意义与内容</h4><blockquote><p>usr是Unix Software Resource,也就是“Unix操作系统软件资源”所放置的目录,所有软件开发者，应该将他们的数据合理的分别放置到这个目录下的次目录，而不要自行创建该软件自己独立的目录。</p></blockquote><h4 id="var-的意义与内容"><a href="#var-的意义与内容" class="headerlink" title="/var 的意义与内容"></a>/var 的意义与内容</h4><blockquote><p>/var目录主要针对常态性变动的文件，包括高速缓存（cache）、登录文件（log file）以及某些软件运行所产生的文件， 包括程序文件（lock file,run file），或者例如MySQL数据库的文件等等。</p></blockquote><p>CentOS 7 与过去的目录编排：</p><ul><li>/bin –&gt; /usr/bin</li><li>/sbin –&gt; /usr/sbin</li><li>/lib –&gt; /usr/lib</li><li>/lib64 –&gt; /usr/lib64</li><li>/var/lock –&gt; /run/lock</li><li>/var/run –&gt; /run</li></ul><h3 id="目录树（directory-tree）"><a href="#目录树（directory-tree）" class="headerlink" title="目录树（directory tree）"></a>目录树（directory tree）</h3><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2020/09/10/LiGJy8qmjgOQSPe.png" alt="目录树架构示意图"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件权限 </tag>
            
            <tag> 目录配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>man page &amp; info page</title>
      <link href="/2020/09/10/man%20page%20&amp;%20info%20page/"/>
      <url>/2020/09/10/man%20page%20&amp;%20info%20page/</url>
      
        <content type="html"><![CDATA[<h2 id="man-page"><a href="#man-page" class="headerlink" title="man page"></a>man page</h2><h3 id="常见数字"><a href="#常见数字" class="headerlink" title="常见数字"></a>常见数字</h3><table><thead><tr><th>代号</th><th>代表内容</th></tr></thead><tbody><tr><td>1</td><td>使用者在shell环境中可以操作的指令或可可执行文件</td></tr><tr><td>2</td><td>系统核心可调用的函数与工具等</td></tr><tr><td>3</td><td>一些常用的函数（function）与函数库（library），大部分为C的函数库（libc）</td></tr><tr><td>4</td><td>设备文件的说明，通常在/dev下的文件</td></tr><tr><td>5</td><td>配置文件或者是某些文件的格式</td></tr><tr><td>6</td><td>游戏（games）</td></tr><tr><td>7</td><td>惯例与协定等，例如Linux文件系统、网络协定、ASCII code等等的说明</td></tr><tr><td>8</td><td>系统管理员可用的管理指令</td></tr><tr><td>9</td><td>跟kernel有关的文件</td></tr></tbody></table><ul><li>上述的表格内容可以使用“man man”来更详细的取得说明。</li></ul><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><table><thead><tr><th>代号</th><th>内容说明</th></tr></thead><tbody><tr><td>NAME</td><td>简短的指令、数据名称说明</td></tr><tr><td>SYNOPSIS</td><td>简短的指令下达语法（syntax）简介</td></tr><tr><td>DESCRIPTION</td><td>较为完整的说明，这部分最好仔细看看！</td></tr><tr><td>OPTIONS</td><td>针对 SYNOPSIS 部分中，有列举的所有可用的选项说明</td></tr><tr><td>COMMANDS</td><td>当这个程序（软件）在执行的时候，可以在此程序（软件）中下达的指令</td></tr><tr><td>FILES</td><td>这个程序或数据所使用或参考或链接到的某些文件</td></tr><tr><td>SEE ALSO</td><td>可以参考的，跟这个指令或数据有相关的其他说明！</td></tr><tr><td>EXAMPLE</td><td>一些可以参考的范例</td></tr></tbody></table><h3 id="查看步骤"><a href="#查看步骤" class="headerlink" title="查看步骤"></a>查看步骤</h3><ol><li>先察看NAME的项目，约略看一下这个数据的意思；</li><li>再详看一下DESCRIPTION，这个部分会提到很多相关的数据与使用时机，从这个地方可<br>以学到很多小细节呢；</li><li>而如果这个指令其实很熟悉了（例如上面的date），那么鸟哥主要就是查询关于OPTIONS的部分了！ 可以知道每个选项的意义，这样就可以下达比较细部的指令内容呢！</li><li>最后，鸟哥会再看一下，跟这个数据有关的还有哪些东西可以使用的？举例来说，上面的SEE ALSO就告知我们还可以利用“info coreutils date”来进一步查阅数据；</li><li>某些说明内容还会列举有关的文件（FILES 部分）来提供我们参考！这些都是很有帮助的！</li></ol><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><table><thead><tr><th>按键</th><th>进行工作</th></tr></thead><tbody><tr><td>空白键</td><td>向下翻一页</td></tr><tr><td>[PageDown]</td><td>向下翻一页</td></tr><tr><td>[PageUp]</td><td>向上翻一页</td></tr><tr><td>[Home]</td><td>去到第一页</td></tr><tr><td>[End]</td><td>去到最后一页</td></tr><tr><td>/string</td><td>向“下”搜寻 string 这个字串</td></tr><tr><td>?string</td><td>向“上”搜寻 string 这个字串</td></tr><tr><td>n, N</td><td>利用 / 或 ? 来搜寻字串时，可以用 n 来继续下一个搜寻 （不论是 / 或 ?），可以利用 N 来进行“反向”搜寻。</td></tr><tr><td>q</td><td>结束这次的 man page</td></tr></tbody></table><h3 id="特殊查询"><a href="#特殊查询" class="headerlink" title="特殊查询"></a>特殊查询</h3><ol><li>查询“man”这个指令有关的说明文档 -f</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[blackgane@study ~]$ man -f man</span><br><span class="line">man （1） - an interface to the on-line reference manuals</span><br><span class="line">man （1p） - display system documentation</span><br><span class="line">man （7） - macros to format man pages</span><br></pre></td></tr></table></figure><ol start="2"><li>查询“man”这个关键词的说明文档 -k</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[blackgane@study ~]$ man -k man</span><br><span class="line">fallocate （2） - manipulate file space</span><br><span class="line">zshall （1） - the Z shell meta-man page</span><br><span class="line">....（中间省略）....</span><br><span class="line">yum-config-manager （1） - manage yum configuration options and yum repositories</span><br></pre></td></tr></table></figure><h2 id="info-page"><a href="#info-page" class="headerlink" title="info page"></a>info page</h2><h3 id="数据意义"><a href="#数据意义" class="headerlink" title="数据意义"></a>数据意义</h3><ol><li>File：代表这个info page的数据是来自info.info文件所提供的；</li><li>Node：代表目前的这个页面是属于Top节点。 意思是info.info内含有很多信息，而Top仅是info.info文件内的一个节点内容而已；</li><li>Next：下一个节点的名称为Getting Started，你也可以按“N”到下个节点去；</li><li>Up：回到上一层的节点总揽画面，你也可以按下“U”回到上一层；</li><li>Prev：前一个节点。但由于Top是info.info的第一个节点，所以上面没有前一个节点的信息。</li></ol><h3 id="快捷键-1"><a href="#快捷键-1" class="headerlink" title="快捷键"></a>快捷键</h3><table><thead><tr><th>按键</th><th>进行工作</th></tr></thead><tbody><tr><td>空白键</td><td>向下翻一页</td></tr><tr><td>[Page Down]</td><td>向下翻一页</td></tr><tr><td>[Page Up]</td><td>向上翻一页</td></tr><tr><td>[tab]</td><td>在 node 之间移动，有 node 的地方，通常会以 * 显示。</td></tr><tr><td>[Enter]</td><td>当光标在 node 上面时，按下 Enter 可以进入该 node 。</td></tr><tr><td>b</td><td>移动光标到该 info 画面当中的第一个 node 处</td></tr><tr><td>e</td><td>移动光标到该 info 画面当中的最后一个 node 处</td></tr><tr><td>n</td><td>前往下一个 node 处</td></tr><tr><td>p</td><td>前往上一个 node 处</td></tr><tr><td>u</td><td>向上移动一层</td></tr><tr><td>s（/）</td><td>在 info page 当中进行搜寻</td></tr><tr><td>h, ?</td><td>显示求助菜单</td></tr><tr><td>q</td><td>结束这次的 info page</td></tr></tbody></table><h2 id="其他有用的文件"><a href="#其他有用的文件" class="headerlink" title="其他有用的文件"></a>其他有用的文件</h2><blockquote><p>很多原版软件释出的时候，都会有一些安装须知、预计工作事项、未来工作规划等等的东西，还有包括可安装的程序等， 这些文件也都放置在 /usr/share/doc 当中</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ManPage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装CentOS7</title>
      <link href="/2020/09/09/%E5%AE%89%E8%A3%85CentOS7/"/>
      <url>/2020/09/09/%E5%AE%89%E8%A3%85CentOS7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>下载链接：<a href="http://vault.centos.org/7.1.1503/isos/x86_64/">http://vault.centos.org/7.1.1503/isos/x86_64/</a></p></blockquote><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li>调整开机媒体（BIOS）：务必要使用CD或DVD光盘开机，通常需要调整BIOS；</li><li>选择安装模式与开机：包括图形接口/命令行等，也可加入特殊参数来开机进入安装画面；</li><li>选择语系数据：由于不同地区的键盘按键不同，此时需要调整语系/键盘/鼠标等配备；</li><li>软件选择：需要什么样的软件？全部安装还是默认安装即可？</li><li>磁盘分区：最重要的项目之一了！记得将刚刚的规划单拿出来设置；</li><li>开机管理程序、网络、时区设置与root密码：一些需要的系统基础设置！</li><li>安装后的首次设置：安装完毕后还有一些事项要处理，包括使用者、SELinux与防火墙等！</li></ol><h3 id="加入强制使用-GPT-分区表的安装参数"><a href="#加入强制使用-GPT-分区表的安装参数" class="headerlink" title="加入强制使用 GPT 分区表的安装参数"></a>加入强制使用 GPT 分区表的安装参数</h3><ol><li>使用方向键，将图 3.2.8 的光标移动到“ Install CentOS 7 ”的项目中</li><li>按下键盘的 <code>Tab</code> 按钮，让光标跑到画面最下方等待输入额外的核心参数</li><li>在出现的画面中，输入如下画面的数据 （注意，各个项目要有空格，最后一个是光标本身而非底线）</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/blackgane/cdn_article@master/article_cdn/gpt.jpg" alt="加入额外的核心参数修改安装程序"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux主机规划与磁盘分区</title>
      <link href="/2020/09/07/Linux%E4%B8%BB%E6%9C%BA%E8%A7%84%E5%88%92%E4%B8%8E%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA/"/>
      <url>/2020/09/07/Linux%E4%B8%BB%E6%9C%BA%E8%A7%84%E5%88%92%E4%B8%8E%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在Linux系统中，每个设备都被当成一个文件来对待</p></blockquote><h2 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h2><table><thead><tr><th>设备</th><th>设备在Linux内的文件名</th></tr></thead><tbody><tr><td>SCSI/SATA/USB硬盘机</td><td>/dev/sd[a-p]</td></tr><tr><td>USB闪存盘</td><td>/dev/sd[a-p] （与SATA相同）</td></tr><tr><td>VirtI/O界面</td><td>/dev/vd[a-p] （用于虚拟机内）</td></tr><tr><td>软盘机</td><td>/dev/fd[0-7]</td></tr><tr><td>打印机</td><td>/dev/lp[0-2] （25针打印机） /dev/usb/lp[0-15] （USB 接口）</td></tr><tr><td>鼠标</td><td>/dev/input/mouse[0-15] （通用） /dev/psaux （PS/2界面）/dev/mouse （当前鼠标）</td></tr><tr><td>CDROM/DVDROM</td><td>/dev/scd[0-1] （通用） /dev/sr[0-1] （通用，CentOS 较常见）/dev/cdrom （当前 CDROM）</td></tr><tr><td>磁带机</td><td>/dev/ht0 （IDE 界面） /dev/st0 （SATA/SCSI界面） /dev/tape（当前磁带）</td></tr><tr><td>IDE硬盘机</td><td>/dev/hd[a-d] （旧式系统才有）</td></tr></tbody></table><h3 id="MSDOS-（MBR）-分区表格式与限制"><a href="#MSDOS-（MBR）-分区表格式与限制" class="headerlink" title="MSDOS （MBR） 分区表格式与限制"></a>MSDOS （MBR） 分区表格式与限制</h3><p>磁盘的第一个扇区 512Bytes 会有这两个数据：</p><ol><li>主要开机记录区（Master Boot Record, MBR）：可以安装开机管理程序的地方，有446Bytes</li><li>分区表（partition table）：记录整颗硬盘分区的状态，有64 Bytes</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/blackgane/cdn_article@master/article_cdn/disk.jpg" alt="磁盘分区表的作用示意图"></p><p>P1:/dev/sda1<br>P2:/dev/sda2<br>L1:/dev/sda5<br>L2:/dev/sda6<br>L3:/dev/sda7<br>L4:/dev/sda8<br>L5:/dev/sda9</p><blockquote><p>怎么设备文件名没有/dev/sda3与/dev/sda4呢？因为前面四个号码都是保留给<br>Primary或Extended用的嘛！ 所以逻辑分区的设备名称号码就由5号开始了！这在 MBR 方式的分区表中是个很重要的特性，不能忘记喔！</p></blockquote><p>MBR 主要分区、延伸分区与逻辑分区的特性：</p><ul><li>主要分区与延伸分区最多可以有四个（硬盘的限制）</li><li>分区表就只有64 Bytes而已，最多只能容纳四笔分区的记录</li><li>延伸分区最多只能有一个（操作系统的限制）</li><li>逻辑分区是由延伸分区持续切割出来的分区；</li><li>能够被格式化后，作为数据存取的分区为主要分区与逻辑分区。延伸分区无法格式化；</li><li>逻辑分区的数量依操作系统而不同，在Linux系统中SATA硬盘已经可以突破63个以上的分区限制；</li></ul><h3 id="GUID-partition-table-GPT-磁盘分区表"><a href="#GUID-partition-table-GPT-磁盘分区表" class="headerlink" title="GUID partition table, GPT 磁盘分区表"></a>GUID partition table, GPT 磁盘分区表</h3><p>因为过去一个扇区大小就是 512Bytes 而已，不过目前已经有 4K 的扇区设计出现！为了相容于所有的磁盘，因此在扇区的定义上面， 大多会使用所谓的逻辑区块位址（Logical Blockv Address, LBA）来处理。GPT 将磁盘所有区块以此 LBA（默认为 512Bytes 喔！） 来规划，而第一个 LBA 称为 LBA0 （从 0 开始编号）。</p><p>与 MBR 仅使用第一个 512Bytes 区块来纪录不同， GPT 使用了 34 个 LBA 区块来纪录分区信息！同时与过去 MBR 仅有一的区块，被干掉就死光光的情况不同， GPT 除了前面 34 个LBA 之外，整个磁盘的最后 33 个 LBA 也拿来作为另一个备份！这样或许会比较安全些吧！<br>详细的结构有点像下面的模样：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/blackgane/cdn_article@master/article_cdn/guid_partition_table_scheme.jpg" alt="GUID Partition Table Scheme"></p><ul><li><p>LBA0 （MBR 相容区块）</p><p>  与 MBR 模式相似的，这个相容区块也分为两个部份，一个就是跟之前 446 Bytes 相似的区块，储存了第一阶段的开机管理程序！ 而在原本的分区表的纪录区内，这个相容模式仅放入一个特殊标志的分区，用来表示此磁盘为 GPT 格式之意。而不懂 GPT 分区表的磁盘管理程序， 就不会认识这颗磁盘，除非用户有特别要求要处理这颗磁盘，否则该管理软件不能修改此分区信息，进一步保护了此磁盘喔！</p></li><li><p>LBA1 （GPT 表头纪录）</p><p>  这个部份纪录了分区表本身的位置与大小，同时纪录了备份用的 GPT 分区 （就是前面谈到的在最后 34 个 LBA 区块） 放置的位置， 同时放置了分区表的检验机制码（CRC32），操作系统可以根据这个检验码来判断 GPT 是否正确。若有错误，还可以通过这个纪录区来取得备份的 GPT（磁盘最后的那个备份区块） 来恢复 GPT 的正常运行！</p></li><li><p>LBA2-33 （实际纪录分区信息处）</p><p>  从 LBA2 区块开始，每个 LBA 都可以纪录 4 笔分区纪录，所以在默认的情况下，总共可以有 432 = 128 笔分区纪录喔！因为每个 LBA 有512Bytes，因此每笔纪录用到 128Bytes 的空间，除了每笔纪录所需要的识别码与相关的纪录之外，GPT 在每笔纪录中分别提供了 64bits 来记载开始/结束的扇区号码，因此，GPT 分区表对於单一分区来说，他的最大容量限制就会在“ 264 512Bytes = 263 1KBytes = 233TB = 8 ZB ”，要注意 1ZB= 230TB 啦！ 你说有没有够大了？</p></li></ul><blockquote><p>现在 GPT 分区默认可以提供多达 <strong>128</strong> 笔纪录，而在 Linux 本身的核心设备纪录中，针对单一磁盘来说，虽然过去最多只能到达 15 个分区，不过由于 Linux kernel 通过 udev 等方式的处理，现在 Linux 也已经没有这个限制在了！此外，GPT 分区已经没有所谓的主、延伸、逻辑分区的概念，既然每笔纪录都可以独立存在， 当然每个都可以视为是主分区！每一个分区都可以拿来格式化使用喔！</p></blockquote><p>整个开机流程到操作系统之前的动作应该是这样的：</p><p>BIOS–&gt;MBR–&gt;–&gt;boot loader–&gt;核心文件；</p><ol><li>BIOS：开机主动执行的固件，会认识第一个可开机的设备；</li><li>MBR：第一个可开机设备的第一个扇区内的主要开机记录区块，内含开机管理程序；</li><li>开机管理程序（boot loader）：一个可读取核心文件来执行的软件；</li><li>核心文件：开始操作系统的功能…</li></ol><blockquote><p>boot loader的功能主要有：提供菜单、载入核心、转交控制权给其他loader</p></blockquote><blockquote><p>boot loader可以安装的地点有两个，分别是 MBR 与 boot sector</p></blockquote><h2 id="Linux安装模式下，磁盘分区的选择"><a href="#Linux安装模式下，磁盘分区的选择" class="headerlink" title="Linux安装模式下，磁盘分区的选择"></a>Linux安装模式下，磁盘分区的选择</h2><h3 id="目录树结构-（directory-tree）"><a href="#目录树结构-（directory-tree）" class="headerlink" title="目录树结构 （directory tree）"></a>目录树结构 （directory tree）</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/blackgane/cdn_article@master/article_cdn/directory_tree.jpg" alt="Directory Tree"></p><h3 id="文件系统与目录树的关系（挂载）"><a href="#文件系统与目录树的关系（挂载）" class="headerlink" title="文件系统与目录树的关系（挂载）"></a>文件系统与目录树的关系（挂载）</h3><p>所谓的“挂载”就是利用一个目录当成进入点，将磁盘分区的数据放置在该目录下； 也就是说，进入该目录就可以读取该分区的意思。这个动作我们称为“挂载”，那个进入点的目录我们称为“挂载点”。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/blackgane/cdn_article@master/article_cdn/tree.jpg" alt="目录树与分区之间的相关性"></p><h2 id="安装前规划"><a href="#安装前规划" class="headerlink" title="安装前规划"></a>安装前规划</h2><ol><li>NAT（达成IP分享器的功能）</li><li>SAMBA（加入Windows网络上的芳邻）</li><li>Mail（邮件服务器）</li><li>Web（WWW服务器）</li><li>DHCP（提供用户端自动取得IP的功能）</li><li>FTP</li></ol><p>目录分配</p><ul><li>/boot</li><li>/</li><li>/home</li><li>/var</li><li>Swap</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 磁盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语音标</title>
      <link href="/2020/09/06/DJ%E9%9F%B3%E6%A0%87/"/>
      <url>/2020/09/06/DJ%E9%9F%B3%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<ol><li><a href="https://www.yingyutu.com/dj">DJ音标</a></li><li><a href="https://www.yingyutu.com/kk">KK音标</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
            <tag> 音标 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学英语准备工作</title>
      <link href="/2020/09/06/%E5%AD%A6%E8%8B%B1%E8%AF%AD%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
      <url>/2020/09/06/%E5%AD%A6%E8%8B%B1%E8%AF%AD%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li><a href="http://testyourvocab.com/">词汇量检测</a></li></ol><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><ol><li><p><a href="https://github.com/yujiangshui/A-Programmers-Guide-to-English">A-Programmers-Guide-to-English</a></p></li><li><p><a href="https://github.com/byoungd/English-level-up-tips-for-Chinese">English-level-up-tips-for-Chinese</a></p></li></ol><h3 id="实用Chrome插件"><a href="#实用Chrome插件" class="headerlink" title="实用Chrome插件"></a>实用Chrome插件</h3><ol><li><a href="https://chrome.google.com/webstore/detail/cambridge-dictionary/kjmjndmenaoihimmojhdabgfjefonmja">Cambridge Dictionary</a>：对准单词右击就打开 Cambridge Dictionary 看到对应的词义，用以重度查询</li><li><a href="https://chrome.google.com/webstore/detail/google-dictionary-by-goog/mgijmajocgfcbeboacabfgobmjgjcoja">Google Dictionary (by Google)</a>：双击即可弹出非常简单的弹窗，附带一个英文发音和简短的英文释义，用以轻度查询</li><li><a href="https://chrome.google.com/webstore/detail/grammarly-for-chrome/kbfnbcaeplbcioakkpcpgfkobkghlhen">Grammarly</a>：语法检测。</li></ol>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习仓库</title>
      <link href="/2020/09/06/Java%E5%AD%A6%E4%B9%A0%E4%BB%93%E5%BA%93/"/>
      <url>/2020/09/06/Java%E5%AD%A6%E4%B9%A0%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="中国科学技术大学课程资源"><a href="#中国科学技术大学课程资源" class="headerlink" title="中国科学技术大学课程资源"></a>中国科学技术大学课程资源</h2><p><a href="https://github.com/USTC-Resource/USTC-Course">仓库地址</a></p><h2 id="浙江大学课程攻略共享计划"><a href="#浙江大学课程攻略共享计划" class="headerlink" title="浙江大学课程攻略共享计划"></a>浙江大学课程攻略共享计划</h2><p><a href="https://github.com/QSCTech/zju-icicles">仓库地址</a></p><h2 id="现代-JavaScript-教程"><a href="#现代-JavaScript-教程" class="headerlink" title="现代 JavaScript 教程"></a>现代 JavaScript 教程</h2><p>以最新的 JavaScript 标准为基准。通过简单但足够详细的内容，为你讲解从基础到高阶的 JavaScript 相关知识，</p><p>当前项目已被翻译为多语言。</p><p><a href="https://github.com/javascript-tutorial/zh.javascript.info">仓库地址</a></p><h2 id="JavaScript-算法与数据结构"><a href="#JavaScript-算法与数据结构" class="headerlink" title="JavaScript 算法与数据结构"></a>JavaScript 算法与数据结构</h2><p>本仓库包含了多种基于 JavaScript 的算法与数据结构，每种算法和数据结构都有自己的 README，包含相关说明和链接，同样的也被翻译为多语言</p><p><a href="https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md">仓库地址</a></p><h2 id="Nodejs-Roadmap"><a href="#Nodejs-Roadmap" class="headerlink" title="Nodejs-Roadmap"></a>Nodejs-Roadmap</h2><p>这是一个侧重于 Node.js 服务端的开发指南，如果你想进一步学习nodejs的话可以尝试一下</p><p><a href="https://github.com/Q-Angelo/Nodejs-Roadmap">仓库地址</a></p><h2 id="FE-Interview-Questions"><a href="#FE-Interview-Questions" class="headerlink" title="FE-Interview-Questions"></a>FE-Interview-Questions</h2><p>前端面试常考问题整理，按模块知识点分类</p><p><a href="https://blog.poetries.top/FE-Interview-Questions/">文档页面 </a></p><p><a href="https://github.com/poetries/FE-Interview-Questions">仓库地址</a></p><h2 id="JavaScript-进阶问题列表"><a href="#JavaScript-进阶问题列表" class="headerlink" title="JavaScript 进阶问题列表"></a>JavaScript 进阶问题列表</h2><p>从基础到进阶，测试你有多了解 JavaScript，刷新你的知识，或者帮助你的 coding<br>面试！作者每周都会在这个仓库下更新的问题，同样的也被翻译为多语言</p><p><a href="https://github.com/lydiahallie/javascript-questions/blob/master/zh-CN/README-zh_CN.md">仓库地址</a></p><h2 id="中国科学技术大学课程资源-1"><a href="#中国科学技术大学课程资源-1" class="headerlink" title="中国科学技术大学课程资源"></a>中国科学技术大学课程资源</h2><p><a href="https://github.com/USTC-Resource/USTC-Course">仓库地址</a></p><h2 id="浙江大学课程攻略共享计划-1"><a href="#浙江大学课程攻略共享计划-1" class="headerlink" title="浙江大学课程攻略共享计划"></a>浙江大学课程攻略共享计划</h2><p><a href="https://github.com/QSCTech/zju-icicles">仓库地址</a></p><h2 id="awesome-java-books"><a href="#awesome-java-books" class="headerlink" title="awesome-java-books"></a>awesome-java-books</h2><p>如果你想知道学习应该看什么书籍，关注这个仓库就对了，作者把不同阶段不同知识点的书籍都列了出来</p><p><a href="https://github.com/sorenduan/awesome-java-books">仓库地址</a></p><h2 id="OnJava8"><a href="#OnJava8" class="headerlink" title="OnJava8"></a>OnJava8</h2><p>《On Java 8》中文版，又名《Java编程思想》 第5版 ，一本可以比较系统的学习Java基础的书籍，最重要的是，它是完全免费的</p><p><a href="https://github.com/LingCoder/OnJava8">仓库地址</a></p><p>下面是两个工具类教程</p><h2 id="IntelliJ-IDEA-Tutorial"><a href="#IntelliJ-IDEA-Tutorial" class="headerlink" title="IntelliJ-IDEA-Tutorial"></a>IntelliJ-IDEA-Tutorial</h2><p>初学者对IDEA不太了解的可以看看这个仓库，这也是很多培训班IDEA教程的素材来源</p><p><a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial">仓库地址</a></p><h2 id="Linux-Tutorial"><a href="#Linux-Tutorial" class="headerlink" title="Linux-Tutorial"></a>Linux-Tutorial</h2><p>想要简单的学习一下linux操作可以看看这个仓库，安装和简单的使用足够了</p><p><a href="https://github.com/judasn/Linux-Tutorial">仓库地址</a></p><h2 id="advanced-java"><a href="#advanced-java" class="headerlink" title="advanced-java"></a>advanced-java</h2><p>互联网 Java 工程师进阶知识完全扫盲：涵盖高并发、分布式、高可用、微服务、海量数据处理等领域知识，后端同学必看，前端同学也可学习</p><p><a href="https://github.com/doocs/advanced-java">仓库地址</a></p><h2 id="java-design-patterns"><a href="#java-design-patterns" class="headerlink" title="java-design-patterns"></a>java-design-patterns</h2><p>学习Java设计模式必看，对新人不太友好的地方就是它是英文的</p><p><a href="https://github.com/iluwatar/java-design-patterns">仓库地址</a></p><h2 id="The-Algorithms-Java"><a href="#The-Algorithms-Java" class="headerlink" title="The Algorithms - Java"></a>The Algorithms - Java</h2><p>使用Java语言的算法教程，同样它也是英文的</p><p><a href="https://github.com/TheAlgorithms/Java">仓库地址</a></p><p>然后是几个关于spring学习的仓库</p><h2 id="spring-boot-demo"><a href="#spring-boot-demo" class="headerlink" title="spring-boot-demo"></a>spring-boot-demo</h2><p>spring boot demo 是一个用来深度学习并实战 spring boot 的项目，目前总共包含 65 个集成demo</p><p><a href="https://github.com/xkcoding/spring-boot-demo">仓库地址</a></p><h2 id="SpringCloudLearning"><a href="#SpringCloudLearning" class="headerlink" title="SpringCloudLearning"></a>SpringCloudLearning</h2><p>方志朋史上最简单的Spring Cloud教程源码</p><p><a href="https://github.com/forezp/SpringCloudLearning">仓库地址</a></p><h2 id="SpringCloud-Learning"><a href="#SpringCloud-Learning" class="headerlink" title="SpringCloud-Learning"></a>SpringCloud-Learning</h2><p>Spring Cloud基础教程，持续连载更新中</p><p><a href="https://github.com/dyc87112/SpringCloud-Learning">仓库地址</a></p><h2 id="mall-learning"><a href="#mall-learning" class="headerlink" title="mall-learning"></a>mall-learning</h2><p>第三个项目是 mall-learning ，这是拥有 35k+star 的mall项目搭配的学习教程，值得推荐</p><p><a href="https://github.com/macrozheng/mall-learning">仓库地址</a></p><p>然后是面试的项目，这类的项目很多，推荐两个最火的</p><h2 id="JavaGuide"><a href="#JavaGuide" class="headerlink" title="JavaGuide"></a>JavaGuide</h2><p><a href="https://github.com/Snailclimb/JavaGuide">仓库地址</a></p><p>「Java学习+面试指南」一份涵盖大部分Java程序员所需要掌握的核心知识,我找工作的时候这个仓库帮助我不要太多，guide哥牛逼</p><h2 id="CS-Notes"><a href="#CS-Notes" class="headerlink" title="CS-Notes"></a>CS-Notes</h2><p><a href="https://github.com/CyC2018/CS-Notes">仓库地址</a></p><p>技术面试必备基础知识、Leetcode、计算机操作系统、计算机网络、系统设计、Java、Python、C++都有，值得收藏</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习路线 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps Developer - Roadmaps</title>
      <link href="/2019/09/23/DevOps%20Developer%20-%20Roadmaps/"/>
      <url>/2019/09/23/DevOps%20Developer%20-%20Roadmaps/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转自<a href="https://roadmap.sh/devops">https://roadmap.sh/devops</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://roadmap.sh/roadmaps/devops.png" alt="DevOps Developer"></p>]]></content>
      
      
      <categories>
          
          <category> Roadmaps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Backend Developer - Roadmaps</title>
      <link href="/2019/09/23/Backend%20Developer%20-%20Roadmaps/"/>
      <url>/2019/09/23/Backend%20Developer%20-%20Roadmaps/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转自<a href="https://roadmap.sh/backend">https://roadmap.sh/backend</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://roadmap.sh/roadmaps/backend.png" alt="Backend Developer"></p>]]></content>
      
      
      <categories>
          
          <category> Roadmaps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Backend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frontend Developer - Roadmaps</title>
      <link href="/2019/09/23/Frontend%20Developer%20-%20Roadmaps/"/>
      <url>/2019/09/23/Frontend%20Developer%20-%20Roadmaps/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转自<a href="https://roadmap.sh/frontend">https://roadmap.sh/frontend</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://roadmap.sh/roadmaps/frontend.png" alt="Frontend Developer"></p>]]></content>
      
      
      <categories>
          
          <category> Roadmaps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frontend </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
